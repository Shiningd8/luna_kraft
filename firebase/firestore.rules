rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to get user ID from reference or string
    function getUserId(ref) {
      return ref is string ? ref : ref.id;
    }

    // Helper function to check if user is post owner
    function isPostOwner() {
      return isAuthenticated() && 
        (getUserId(resource.data.poster) == request.auth.uid || 
         getUserId(resource.data.userref) == request.auth.uid);
    }

    match /posts/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(resource.data.userId);
    }

    match /User/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(document);
    }

    match /comments/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userref;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userref;
    }

    match /usernames/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if false;
      allow delete: if false;
    }

    match /users/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(document);
    }

    match /notifications/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    match /analyze/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    match /dream_analysis/{document} {
      allow create: if isAuthenticated() && 
        request.resource.data.userref.path == '/User/' + request.auth.uid;
      allow read: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
    }

    match /dreams/{document} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    match /followers/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(resource.data.userId);
    }

    match /following/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(resource.data.userId);
    }
  }
}
