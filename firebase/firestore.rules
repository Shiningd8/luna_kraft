rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserId(ref) {
      return ref is string ? ref : (
        ref is path ? ref.id : (
          ref is map && "id" in ref ? ref.id : null
        )
      );
    }

    function isPostOwner() {
      return isAuthenticated() && (
        (resource.data.poster != null && getUserId(resource.data.poster) == request.auth.uid) || 
        (resource.data.userref != null && getUserId(resource.data.userref) == request.auth.uid)
      );
    }

    function postExists() {
      return exists(/databases/$(database)/documents/posts/$(request.path[3]));
    }

    match /posts/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    match /User/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(document);
    }

    match /comments/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    match /deleted_comments/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }

    match /usernames/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if false;
      allow delete: if false;
    }

    match /users/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(document);
    }

    match /notifications/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    match /analyze/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    match /dream_analysis/{document} {
      allow create: if isAuthenticated() && 
        request.resource.data.userref.path == '/User/' + request.auth.uid;
      allow read: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
    }

    match /dreams/{document} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    match /followers/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(resource.data.userId);
    }

    match /following/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(resource.data.userId);
    }

    match /admin_requests/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
  }
}