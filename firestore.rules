rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to get user ID from reference or string
    function getUserId(ref) {
      return ref is string ? ref : ref.id;
    }

    // Helper function to check if user is post owner
    function isPostOwner() {
      return isAuthenticated() && 
        (getUserId(resource.data.poster) == request.auth.uid || 
         getUserId(resource.data.userref) == request.auth.uid);
    }

    // Helper function to check if a post exists
    function postExists(postRef) {
      return exists(postRef);
    }

    // Helper function to check if user is comment owner
    function isCommentOwner(comment) {
      return isAuthenticated() && 
        request.auth.uid == getUserId(comment.userref);
    }

    // Helper function to check if user is the owner of the post that a comment belongs to
    function isCommentPostOwner(comment) {
      let postRef = comment.postref;
      return isAuthenticated() && 
             postRef != null && 
             exists(postRef) && 
             (getUserId(get(postRef).data.poster) == request.auth.uid || 
              getUserId(get(postRef).data.userref) == request.auth.uid);
    }

    // Add offline time buffer to prevent stale writes
    function isStaleWrite() {
      return request.time > resource.data.lastModified + duration.value(1, 'h');
    }

    match /posts/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated() && (
        isPostOwner() || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['Post_saved_by'])
      );
      allow delete: if isOwner(resource.data.userId);
    }

    match /User/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated() && (
        isOwner(document) || 
        // Allow FCM token updates even if other writes are in progress
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fcmToken', 'lastTokenUpdate'])
      );
      allow delete: if isOwner(document);
    }

    match /comments/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated() && (
        isCommentOwner(resource.data) || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pendingDeletion', 'likes'])
      );
      allow delete: if isAuthenticated() && (
        isCommentOwner(resource.data) || 
        isCommentPostOwner(resource.data)
      );
    }

    match /usernames/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if false;
      allow delete: if false;
    }

    match /users/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated() && (
        isOwner(document) || 
        // Allow FCM token updates even if other writes are in progress
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fcmToken', 'lastTokenUpdate'])
      );
      allow delete: if isOwner(document);
    }

    match /notifications/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    match /analyze/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    match /dream_analysis/{document} {
      allow create: if isAuthenticated() && 
        request.resource.data.userref.path == '/User/' + request.auth.uid;
      allow read: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userref.path == '/User/' + request.auth.uid;
    }

    match /dreams/{document} {
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    match /followers/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(resource.data.userId);
    }

    match /following/{document} {
      allow create: if isAuthenticated();
      allow read: if true;
      allow update: if isAuthenticated();
      allow delete: if isOwner(resource.data.userId);
    }
    
    // New rules for bug reports and feature requests
    match /bug_reports/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
    
    match /feature_requests/{document} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
    
    // Add system collection for connectivity checks
    match /system/{document} {
      allow read: if true;
      allow write: if false;
    }
  }
}
